/* eslint-disable */
const kUrlChars =
  'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_'.split('');

/**
 * Utilities for GUID/UUID objects: RFC-4122, Variant 4 (Leach-Salz).
 *
 * Current support for:
 * {@link #createRandom() Version 4 (random)},
 *
 * <p>A Guid is a 128 bit number, stored as a string.
 * RFC-4122 is meant as be backwards compatible with a whole lot of other GUID/UUID
 * specs, so the layout is more confusing than you might expect. All Guids generated
 * by this class will contain a valid version and variant field:
 *
 * <pre>
 * Most Significant Bits
 * version : 0x000000000000F000
 * Least Significant Bits
 * variant : 0xC000000000000000
 * </pre>
 *
 * The <i>version</i> field specifies the type of UUID:
 * <pre>
 * 0x1 : Time-based (Recommended)
 * 0x2 : DCE Security, with embedded POSIX UUID (not generated by this class)
 * 0x3 : Name-based using MD5 hash (Not recommended)
 * 0x4 : Random-generated (Recommended)
 * 0x5 : Name-based using SHA-1 hash (Not recommended)
 * 0xD : Name-based using SHA-256 hash (Recommended)
 * </pre>
 *
 * The <i>reserved</i> field is the variant. All UUIDs generated by
 * this class have <code>reserved = 0x2</code>.
 *
 * @author Philip DeCamp
 */
export class Guid {
  /**
   * Returns a new random Guid (version 0x4). The returned Guid will contain:
   *
   * <pre>
   * Most Significant Bits
   * random0      : 0xFFFFFFFFFFFF0000
   * version      : 0x000000000000F000
   * random1      : 0x0000000000000FFF
   *
   * Least Significant Bits
   * reserved     : 0xC000000000000000
   * random2      : 0x3FFFFFFFFFFFFFFF
   * </pre>
   *
   * <p>
   * random0:random1:random2 - 122 random bits generated from a secure pseudo-random number generator.
   * <p>
   * reserved - 2 variant bits, set as b10.
   * <p>
   * version - 4 version bits, set as b0100.
   *
   * @return {!string} new random Guid.
   */
  static createRandom() {
    const str = new Array(22);
    let oi = 0;
    let shift;

    for (let i = 0; i < 5; i++) {
      // Generate noise 30 bits at a time. Convert to chars in 6 bit chunks.
      let bits = (Math.random() * 0x40000000) | 0;
      shift = 24;

      if (i === 1) {
        // Set bits 48->52 to 0x4.
        bits = (bits & 0x3ffff0ff) | 0x00000400;
      } else if (i === 2) {
        // Set bits 64->66 to 0x2.
        bits = (bits & 0x3cffffff) | 0x02000000;
      } else if (i === 4) {
        // Only 8 bits left to encode. However, we encode in 6-bit chunks.
        // bits & 0x0FC0 -> str[20]
        // bits & 0x0030 -> str[21]
        bits &= 0x00000ff0;
        shift = 6;
      }

      for (; shift >= 0; shift -= 6) {
        str[oi++] = kUrlChars[(bits >> shift) & 0x3f];
      }
    }

    return str.join('');
  }
}
